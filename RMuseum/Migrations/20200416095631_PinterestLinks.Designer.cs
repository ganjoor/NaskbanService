// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RMuseum.DbContext;

namespace RMuseum.Migrations
{
    [DbContext(typeof(RMuseumDbContext))]
    [Migration("20200416095631_PinterestLinks")]
    partial class PinterestLinks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RArtifactItemRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoverImageIndex")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("RArtifactMasterRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RArtifactMasterRecordId", "FriendlyUrl")
                        .IsUnique()
                        .HasFilter("[FriendlyUrl] IS NOT NULL");

                    b.HasIndex("RArtifactMasterRecordId", "Order")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RArtifactMasterRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoverItemIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ItemCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("FriendlyUrl")
                        .IsUnique()
                        .HasFilter("[FriendlyUrl] IS NOT NULL");

                    b.ToTable("Artifacts");
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("GlobalValue")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PluralName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PluralNameInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TagType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendlyUrl");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RTagValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("RArtifactItemRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RArtifactMasterRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueSupplement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FriendlyUrl");

                    b.HasIndex("RArtifactItemRecordId");

                    b.HasIndex("RArtifactMasterRecordId");

                    b.HasIndex("RTagId");

                    b.ToTable("TagValues");
                });

            modelBuilder.Entity("RMuseum.Models.Bookmark.RUserBookmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RAppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RArtifactItemRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RArtifactMasterRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RBookmarkType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RAppUserId");

                    b.HasIndex("RArtifactItemRecordId");

                    b.HasIndex("RArtifactMasterRecordId");

                    b.ToTable("UserBookmarks");
                });

            modelBuilder.Entity("RMuseum.Models.GanjoorIntegration.GanjoorLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtifactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GanjoorPostId")
                        .HasColumnType("int");

                    b.Property<string>("GanjoorTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GanjoorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewResult")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuggestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SuggestionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Synchronized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArtifactId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SuggestedById");

                    b.ToTable("GanjoorLinks");
                });

            modelBuilder.Entity("RMuseum.Models.GanjoorIntegration.PinterestLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ArtifactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GanjoorPostId")
                        .HasColumnType("int");

                    b.Property<string>("GanjoorTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GanjoorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LinkType")
                        .HasColumnType("int");

                    b.Property<string>("PinterestImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinterestUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewResult")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuggestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SuggestionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Synchronized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArtifactId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SuggestedById");

                    b.ToTable("PinterestLinks");
                });

            modelBuilder.Entity("RMuseum.Models.ImportJob.ImportJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtifactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<decimal>("ProgressPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("QueueTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResourceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SrcContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SrcUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtifactId");

                    b.ToTable("ImportJobs");
                });

            modelBuilder.Entity("RMuseum.Models.Note.RUserNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HtmlContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Modified")
                        .HasColumnType("bit");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.Property<Guid>("RAppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RArtifactItemRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RArtifactMasterRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferenceNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RAppUserId");

                    b.HasIndex("RArtifactItemRecordId");

                    b.HasIndex("RArtifactMasterRecordId");

                    b.HasIndex("ReferenceNoteId");

                    b.ToTable("UserNotes");
                });

            modelBuilder.Entity("RMuseum.Models.Notification.RUserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HtmlText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Audit.Db.REvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RAppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RAppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RImageId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RCaptchaImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RImageId");

                    b.ToTable("CaptchaImages");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperationShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RAppRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurableItemShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RAppRoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RTemporaryUserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientAppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastRenewal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RAppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RAppUserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RVerifyQueueItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientAppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QueueType")
                        .HasColumnType("int");

                    b.Property<string>("Secret")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Secret")
                        .IsUnique()
                        .HasFilter("[Secret] IS NOT NULL");

                    b.ToTable("VerifyQueueItems");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Image.RImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("FolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("ImageWidth")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoredFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeneralImages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RImage");
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RPictureFile", b =>
                {
                    b.HasBaseType("RSecurityBackend.Models.Image.RImage");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedMeta")
                        .HasColumnType("datetime2");

                    b.Property<int>("NormalSizeImageHeight")
                        .HasColumnType("int");

                    b.Property<string>("NormalSizeImageStoredFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NormalSizeImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("RArtifactItemRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SrcUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailImageHeight")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImageStoredFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThumbnailImageWidth")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RArtifactItemRecordId");

                    b.HasDiscriminator().HasValue("RPictureFile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RArtifactItemRecord", b =>
                {
                    b.HasOne("RMuseum.Models.Artifact.RArtifactMasterRecord", null)
                        .WithMany("Items")
                        .HasForeignKey("RArtifactMasterRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RArtifactMasterRecord", b =>
                {
                    b.HasOne("RMuseum.Models.Artifact.RPictureFile", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RTagValue", b =>
                {
                    b.HasOne("RMuseum.Models.Artifact.RArtifactItemRecord", null)
                        .WithMany("Tags")
                        .HasForeignKey("RArtifactItemRecordId");

                    b.HasOne("RMuseum.Models.Artifact.RArtifactMasterRecord", null)
                        .WithMany("Tags")
                        .HasForeignKey("RArtifactMasterRecordId");

                    b.HasOne("RMuseum.Models.Artifact.RTag", "RTag")
                        .WithMany()
                        .HasForeignKey("RTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMuseum.Models.Bookmark.RUserBookmark", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", "RAppUser")
                        .WithMany()
                        .HasForeignKey("RAppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMuseum.Models.Artifact.RArtifactItemRecord", "RArtifactItemRecord")
                        .WithMany()
                        .HasForeignKey("RArtifactItemRecordId");

                    b.HasOne("RMuseum.Models.Artifact.RArtifactMasterRecord", "RArtifactMasterRecord")
                        .WithMany()
                        .HasForeignKey("RArtifactMasterRecordId");
                });

            modelBuilder.Entity("RMuseum.Models.GanjoorIntegration.GanjoorLink", b =>
                {
                    b.HasOne("RMuseum.Models.Artifact.RArtifactMasterRecord", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMuseum.Models.Artifact.RArtifactItemRecord", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", "SuggestedBy")
                        .WithMany()
                        .HasForeignKey("SuggestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMuseum.Models.GanjoorIntegration.PinterestLink", b =>
                {
                    b.HasOne("RMuseum.Models.Artifact.RArtifactMasterRecord", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId");

                    b.HasOne("RMuseum.Models.Artifact.RArtifactItemRecord", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", "SuggestedBy")
                        .WithMany()
                        .HasForeignKey("SuggestedById");
                });

            modelBuilder.Entity("RMuseum.Models.ImportJob.ImportJob", b =>
                {
                    b.HasOne("RMuseum.Models.Artifact.RArtifactMasterRecord", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId");
                });

            modelBuilder.Entity("RMuseum.Models.Note.RUserNote", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", "RAppUser")
                        .WithMany()
                        .HasForeignKey("RAppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMuseum.Models.Artifact.RArtifactItemRecord", "RArtifactItemRecord")
                        .WithMany()
                        .HasForeignKey("RArtifactItemRecordId");

                    b.HasOne("RMuseum.Models.Artifact.RArtifactMasterRecord", "RArtifactMasterRecord")
                        .WithMany()
                        .HasForeignKey("RArtifactMasterRecordId");

                    b.HasOne("RMuseum.Models.Note.RUserNote", "ReferenceNote")
                        .WithMany()
                        .HasForeignKey("ReferenceNoteId");
                });

            modelBuilder.Entity("RMuseum.Models.Notification.RUserNotification", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RAppUser", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Image.RImage", "RImage")
                        .WithMany()
                        .HasForeignKey("RImageId");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RCaptchaImage", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Image.RImage", "RImage")
                        .WithMany()
                        .HasForeignKey("RImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RPermission", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RAppRoleId");
                });

            modelBuilder.Entity("RSecurityBackend.Models.Auth.Db.RTemporaryUserSession", b =>
                {
                    b.HasOne("RSecurityBackend.Models.Auth.Db.RAppUser", "RAppUser")
                        .WithMany()
                        .HasForeignKey("RAppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMuseum.Models.Artifact.RPictureFile", b =>
                {
                    b.HasOne("RMuseum.Models.Artifact.RArtifactItemRecord", null)
                        .WithMany("Images")
                        .HasForeignKey("RArtifactItemRecordId");
                });
#pragma warning restore 612, 618
        }
    }
}
